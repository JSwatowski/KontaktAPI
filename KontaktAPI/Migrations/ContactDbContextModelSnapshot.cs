// <auto-generated />
using System;
using KontaktAPI.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KontaktAPI.Migrations
{
    [DbContext(typeof(ContactDbContext))]
    partial class ContactDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.12");

            modelBuilder.Entity("KontaktAPI.Model.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Categories")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Phone")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SubCategory")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Categories = 1,
                            DateOfBirth = new DateTime(2022, 12, 14, 17, 50, 52, 512, DateTimeKind.Local).AddTicks(1513),
                            Email = "j.kowalski@gmail.com",
                            Name = "Jan",
                            Password = "123456",
                            Phone = 123456789,
                            SubCategory = "",
                            Surname = "Kowalski"
                        },
                        new
                        {
                            Id = 2,
                            Categories = 0,
                            DateOfBirth = new DateTime(2022, 12, 14, 17, 50, 52, 512, DateTimeKind.Local).AddTicks(1553),
                            Email = "s.Nowak@gmail.com",
                            Name = "Stefan",
                            Password = "123456",
                            Phone = 123456782,
                            SubCategory = "Szef",
                            Surname = "Nowak"
                        },
                        new
                        {
                            Id = 3,
                            Categories = 0,
                            DateOfBirth = new DateTime(2022, 12, 14, 17, 50, 52, 512, DateTimeKind.Local).AddTicks(1557),
                            Email = "j.Kowalska@gmail.com",
                            Name = "Janina",
                            Password = "123456",
                            Phone = 123456783,
                            SubCategory = "Klient",
                            Surname = "Kowalska"
                        },
                        new
                        {
                            Id = 4,
                            Categories = 1,
                            DateOfBirth = new DateTime(2022, 12, 14, 17, 50, 52, 512, DateTimeKind.Local).AddTicks(1559),
                            Email = "m.kowalski@gmail.com",
                            Name = "Marek",
                            Password = "123456",
                            Phone = 123456784,
                            SubCategory = "",
                            Surname = "Kowalski"
                        },
                        new
                        {
                            Id = 5,
                            Categories = 1,
                            DateOfBirth = new DateTime(2022, 12, 14, 17, 50, 52, 512, DateTimeKind.Local).AddTicks(1560),
                            Email = "a.Kowalska@gmail.com",
                            Name = "Agnieszka",
                            Password = "123456",
                            Phone = 123456785,
                            SubCategory = "",
                            Surname = "Kowalska"
                        });
                });

            modelBuilder.Entity("KontaktAPI.Model.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("KontaktAPI.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("KontaktAPI.Model.User", b =>
                {
                    b.HasOne("KontaktAPI.Model.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
